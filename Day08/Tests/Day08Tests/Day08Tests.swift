import Testing
@testable import Day08

@Test func example() async throws {
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
}

@Suite("To get the first star on day 08") struct Day08StarOneTests {
    @Test("An empty map has no antinodes") func antinodes_forEmptyMap() {
        let map = ""
        #expect(calculateNumberOfAntinodePositions(in: map) == 0)
    }
    
    @Test("This map has two antinode positions") func antinodes_forMapWithTwoSpecifcNodes() {
        let map =
        """
        ..........
        ..........
        ..........
        ....a.....
        ..........
        .....a....
        ..........
        ..........
        ..........
        ..........
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 2)
    }
    
    @Test("This map has six antinode positions") func antinodes_forMapWithThreeSpecifcNodes() {
        let map =
        """
        ................
        ................
        ................
        ......a.........
        ..........a.....
        .......a........
        ................
        ................
        ................
        ................
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 6)
    }
    
    @Test("This map has four antinode positions, because some positions fall outsde of the boundaries of the map") func antinodes_forMapWithThreeSpecifcNodes_whereSomeFallOutsideOfBoundaries() {
        let map =
        """
        ..........
        ..........
        ..........
        ....a.....
        ........a.
        .....a....
        ..........
        ..........
        ..........
        ..........
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 4)
    }
    
    @Test("The number of unique locations that contain an antinode should equal 14") func uniqueAntinodeLocations_forExampleInput() {
        let exampleInput =
        """
        ............
        ........0...
        .....0......
        .......0....
        ....0.......
        ......A.....
        ............
        ............
        ........A...
        .........A..
        ............
        ............
        """
        #expect(calculateNumberOfAntinodePositions(in: exampleInput) == 14)
    }
}
