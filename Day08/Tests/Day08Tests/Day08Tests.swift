import Testing
@testable import Day08

let exampleInput =
"""
............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............
"""

@Test func example() async throws {
    // Write your test here and use APIs like `#expect(...)` to check expected conditions.
}

@Suite("To get the first star on day 08") struct Day08StarOneTests {
    @Test("An empty map has no antinodes") func antinodes_forEmptyMap() {
        let map = ""
        #expect(calculateNumberOfAntinodePositions(in: map) == 0)
    }
    
    @Test("This map has two antinode positions") func antinodes_forMapWithTwoSpecifcNodes() {
        let map =
        """
        ..........
        ..........
        ..........
        ....a.....
        ..........
        .....a....
        ..........
        ..........
        ..........
        ..........
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 2)
    }
    
    @Test("This map has six antinode positions") func antinodes_forMapWithThreeSpecifcNodes() {
        let map =
        """
        ................
        ................
        ................
        ......a.........
        ..........a.....
        .......a........
        ................
        ................
        ................
        ................
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 6)
    }
    
    @Test("This map has four antinode positions, because some positions fall outsde of the boundaries of the map") func antinodes_forMapWithThreeSpecifcNodes_whereSomeFallOutsideOfBoundaries() {
        let map =
        """
        ..........
        ..........
        ..........
        ....a.....
        ........a.
        .....a....
        ..........
        ..........
        ..........
        ..........
        """
        
        #expect(calculateNumberOfAntinodePositions(in: map) == 4)
    }
    
    @Test("The number of unique locations in the example input that contain an antinode should equal 14") func uniqueAntinodeLocations_forExampleInput() {
        #expect(calculateNumberOfAntinodePositions(in: exampleInput) == 14)
    }
    
    @Test("The number of unique locations in the actual input that contain an antinode should equal 361") func uniqueAntinodeLocations_forActualInput() {
        #expect(calculateNumberOfAntinodePositions(in: input) == 361)
    }
}

@Suite("To get the second star on day 08") struct Day08StarTwoTests {
    @Test("The following example of three nodes now 9 antinodes when lines are taken into account") func threeNodes_withLinesTakenIntoAccount() {
        let map =
        """
        T.........
        ...T......
        .T........
        ..........
        ..........
        ..........
        ..........
        ..........
        ..........
        ..........
        """
        #expect(calculateNumberOfAntinodePositions_includingLines(in: map) == 9)
    }
    
    @Test("The number of unique locations in the example input that contain an antinode should equal 34 when lines are taken into account") func uniqueAntinodeLocations_forExampleInput_withLinesTakenIntoAccount() {
        #expect(calculateNumberOfAntinodePositions_includingLines(in: exampleInput) == 34)
    }
}
